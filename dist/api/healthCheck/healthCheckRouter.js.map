{"version":3,"sources":["../../../src/api/healthCheck/healthCheckRouter.ts","../../../src/api-docs/openAPIResponseBuilders.ts","../../../src/common/models/serviceResponse.ts","../../../src/common/utils/httpHandlers.ts"],"sourcesContent":["import { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport express, { type Request, type Response, type Router } from \"express\";\nimport { z } from \"zod\";\n\nimport { createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { handleServiceResponse } from \"@/common/utils/httpHandlers\";\n\nexport const healthCheckRegistry = new OpenAPIRegistry();\nexport const healthCheckRouter: Router = express.Router();\n\nhealthCheckRegistry.registerPath({\n  method: \"get\",\n  path: \"/health-check\",\n  tags: [\"Health Check\"],\n  responses: createApiResponse(z.null(), \"Success\"),\n});\n\nhealthCheckRouter.get(\"/\", (_req: Request, res: Response) => {\n  const serviceResponse = ServiceResponse.success(\"Service is healthy\", null);\n  return handleServiceResponse(serviceResponse, res);\n});\n","import { StatusCodes } from \"http-status-codes\";\nimport type { z } from \"zod\";\n\nimport { ServiceResponseSchema } from \"@/common/models/serviceResponse\";\n\nexport function createApiResponse(schema: z.ZodTypeAny, description: string, statusCode = StatusCodes.OK) {\n  return {\n    [statusCode]: {\n      description,\n      content: {\n        \"application/json\": {\n          schema: ServiceResponseSchema(schema),\n        },\n      },\n    },\n  };\n}\n\n// Use if you want multiple responses for a single endpoint\n\n// import { ResponseConfig } from '@asteasolutions/zod-to-openapi';\n// import { ApiResponseConfig } from '@common/models/openAPIResponseConfig';\n// export type ApiResponseConfig = {\n//   schema: z.ZodTypeAny;\n//   description: string;\n//   statusCode: StatusCodes;\n// };\n// export function createApiResponses(configs: ApiResponseConfig[]) {\n//   const responses: { [key: string]: ResponseConfig } = {};\n//   configs.forEach(({ schema, description, statusCode }) => {\n//     responses[statusCode] = {\n//       description,\n//       content: {\n//         'application/json': {\n//           schema: ServiceResponseSchema(schema),\n//         },\n//       },\n//     };\n//   });\n//   return responses;\n// }\n","import { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\n\nexport class ServiceResponse<T = null> {\n  readonly success: boolean;\n  readonly message: string;\n  readonly responseObject: T;\n  readonly statusCode: number;\n\n  private constructor(success: boolean, message: string, responseObject: T, statusCode: number) {\n    this.success = success;\n    this.message = message;\n    this.responseObject = responseObject;\n    this.statusCode = statusCode;\n  }\n\n  static success<T>(message: string, responseObject: T, statusCode: number = StatusCodes.OK) {\n    return new ServiceResponse(true, message, responseObject, statusCode);\n  }\n\n  static failure<T>(message: string, responseObject: T, statusCode: number = StatusCodes.BAD_REQUEST) {\n    return new ServiceResponse(false, message, responseObject, statusCode);\n  }\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    message: z.string(),\n    responseObject: dataSchema.optional(),\n    statusCode: z.number(),\n  });\n","import type { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport type { ZodError, ZodSchema } from \"zod\";\n\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\n\nexport const handleServiceResponse = (serviceResponse: ServiceResponse<any>, response: Response) => {\n  return response.status(serviceResponse.statusCode).send(serviceResponse);\n};\n\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\n  try {\n    schema.parse({ body: req.body, query: req.query, params: req.params });\n    next();\n  } catch (err) {\n    const errorMessage = `Invalid input: ${(err as ZodError).errors.map((e) => e.message).join(\", \")}`;\n    const statusCode = StatusCodes.BAD_REQUEST;\n    const serviceResponse = ServiceResponse.failure(errorMessage, null, statusCode);\n    return handleServiceResponse(serviceResponse, res);\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAgC;AAChC,qBAAkE;AAClE,IAAAA,cAAkB;;;ACFlB,IAAAC,4BAA4B;;;ACA5B,+BAA4B;AAC5B,iBAAkB;AAEX,IAAM,kBAAN,MAAM,iBAA0B;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAED,YAAY,SAAkB,SAAiB,gBAAmB,YAAoB;AAC5F,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,OAAO,QAAW,SAAiB,gBAAmB,aAAqB,qCAAY,IAAI;AACzF,WAAO,IAAI,iBAAgB,MAAM,SAAS,gBAAgB,UAAU;AAAA,EACtE;AAAA,EAEA,OAAO,QAAW,SAAiB,gBAAmB,aAAqB,qCAAY,aAAa;AAClG,WAAO,IAAI,iBAAgB,OAAO,SAAS,gBAAgB,UAAU;AAAA,EACvE;AACF;AAEO,IAAM,wBAAwB,CAAyB,eAC5D,aAAE,OAAO;AAAA,EACP,SAAS,aAAE,QAAQ;AAAA,EACnB,SAAS,aAAE,OAAO;AAAA,EAClB,gBAAgB,WAAW,SAAS;AAAA,EACpC,YAAY,aAAE,OAAO;AACvB,CAAC;;;AD1BI,SAAS,kBAAkB,QAAsB,aAAqB,aAAa,sCAAY,IAAI;AACxG,SAAO;AAAA,IACL,CAAC,UAAU,GAAG;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ,sBAAsB,MAAM;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AEfA,IAAAC,4BAA4B;AAKrB,IAAM,wBAAwB,CAAC,iBAAuC,aAAuB;AAClG,SAAO,SAAS,OAAO,gBAAgB,UAAU,EAAE,KAAK,eAAe;AACzE;;;AHAO,IAAM,sBAAsB,IAAI,sCAAgB;AAChD,IAAM,oBAA4B,eAAAC,QAAQ,OAAO;AAExD,oBAAoB,aAAa;AAAA,EAC/B,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM,CAAC,cAAc;AAAA,EACrB,WAAW,kBAAkB,cAAE,KAAK,GAAG,SAAS;AAClD,CAAC;AAED,kBAAkB,IAAI,KAAK,CAAC,MAAe,QAAkB;AAC3D,QAAM,kBAAkB,gBAAgB,QAAQ,sBAAsB,IAAI;AAC1E,SAAO,sBAAsB,iBAAiB,GAAG;AACnD,CAAC;","names":["import_zod","import_http_status_codes","import_http_status_codes","express"]}