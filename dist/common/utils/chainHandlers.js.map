{"version":3,"sources":["../../../src/common/utils/chainHandlers.ts","../../../src/assets/TeleHunterFactoryWrapper.ts","../../../src/assets/HunterItemWrapper.ts"],"sourcesContent":["import { TonClient } from \"ton\";\nimport { Address, } from 'ton-core';\nimport { TeleHunterFactory } from '@/assets/TeleHunterFactoryWrapper';\nimport { HunterItemWrapper } from \"@/assets/HunterItemWrapper\";\nimport { ethers } from \"ethers\";\n\nexport async function verifyPayment(id: string, joinAddress: string): Promise<boolean> {\n    const client = new TonClient({\n        endpoint: \"https://testnet.toncenter.com/api/v2/jsonRPC\",\n        apiKey: \"509a1c3746f03dd5cb9d8192209467d47d8f0392faa7077427520b2774e45dee\"\n    })\n\n    try {\n        const factory = await client.open(new TeleHunterFactory(Address.parse(\"EQB_xLfZPt4T1xtHYSVr6hrpt6evIk-Thty9i-D-gss4w5YN\")));\n        const hunterItem = await factory.getHunterItemAddr(id);\n        const hunterContract = await client.open(new HunterItemWrapper(\n            hunterItem.address\n        ));\n\n        const status = await hunterContract.getBasicInfo();\n\n        console.log(status)\n        return status.isJoined;\n    } catch (error) {\n        return false;\n    }\n}\n\nexport function verifySig(message: string, sig: string): boolean {\n    const address = ethers.verifyMessage(message, sig);\n    return address.toLowerCase() == process.env.ADDRESS\n}","import { Address, Cell, Contract, ContractProvider, TupleBuilder, Builder } from \"ton-core\";\n\nexport class TeleHunterFactory implements Contract {\n\tconstructor(\n\t\treadonly address: Address,\n\t\treadonly init?: { code: Cell, data: Cell }\n\t){}\n\n\tasync getOwner(provider: ContractProvider) {\n\t\tconst { stack } = await provider.get(\"owner\", []);\n\t\treturn {\n\t\t\towner: stack.readAddress(),\n\t\t};\n\t}\n\n\tasync getBasicInfo(provider: ContractProvider) {\n\t\tconst { stack } = await provider.get(\"getBasicInfo\", []);\n\t\treturn {\n\t\t\ttotalUsers: stack.readBigNumber(),\n\t\t};\n\t}\n\n\tasync getHunterItemAddr(provider: ContractProvider, tgID: string) {\n\t\tlet builder = new TupleBuilder();\n\t\tbuilder.writeString(tgID);\n\t\tconst { stack } = await provider.get(\"getHunterItemAddr\", builder.build());\n\t\treturn {\n\t\t\taddress: stack.readAddress(),\n\t\t};\n\t}\n}","import { Address, Cell, Contract, ContractProvider } from \"ton-core\";\n\nexport class HunterItemWrapper implements Contract {\n    constructor(\n        readonly address: Address,\n        readonly init?: { code: Cell, data: Cell }\n    ) { }\n\n    async getOwner(provider: ContractProvider) {\n        const { stack } = await provider.get(\"owner\", []);\n        return {\n            owner: stack.readAddress(),\n        };\n    }\n\n    async getBasicInfo(provider: ContractProvider) {\n        const { stack } = await provider.get(\"getBasicInfo\", []);\n        return {\n            isJoined: stack.readBoolean(),\n            walletAddr: stack.readAddress()\n        };\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA0B;AAC1B,IAAAA,mBAAyB;;;ACDzB,sBAAiF;AAE1E,IAAM,oBAAN,MAA4C;AAAA,EAClD,YACU,SACA,MACT;AAFS;AACA;AAAA,EACR;AAAA,EAEF,MAAM,SAAS,UAA4B;AAC1C,UAAM,EAAE,MAAM,IAAI,MAAM,SAAS,IAAI,SAAS,CAAC,CAAC;AAChD,WAAO;AAAA,MACN,OAAO,MAAM,YAAY;AAAA,IAC1B;AAAA,EACD;AAAA,EAEA,MAAM,aAAa,UAA4B;AAC9C,UAAM,EAAE,MAAM,IAAI,MAAM,SAAS,IAAI,gBAAgB,CAAC,CAAC;AACvD,WAAO;AAAA,MACN,YAAY,MAAM,cAAc;AAAA,IACjC;AAAA,EACD;AAAA,EAEA,MAAM,kBAAkB,UAA4B,MAAc;AACjE,QAAI,UAAU,IAAI,6BAAa;AAC/B,YAAQ,YAAY,IAAI;AACxB,UAAM,EAAE,MAAM,IAAI,MAAM,SAAS,IAAI,qBAAqB,QAAQ,MAAM,CAAC;AACzE,WAAO;AAAA,MACN,SAAS,MAAM,YAAY;AAAA,IAC5B;AAAA,EACD;AACD;;;AC5BO,IAAM,oBAAN,MAA4C;AAAA,EAC/C,YACa,SACA,MACX;AAFW;AACA;AAAA,EACT;AAAA,EAEJ,MAAM,SAAS,UAA4B;AACvC,UAAM,EAAE,MAAM,IAAI,MAAM,SAAS,IAAI,SAAS,CAAC,CAAC;AAChD,WAAO;AAAA,MACH,OAAO,MAAM,YAAY;AAAA,IAC7B;AAAA,EACJ;AAAA,EAEA,MAAM,aAAa,UAA4B;AAC3C,UAAM,EAAE,MAAM,IAAI,MAAM,SAAS,IAAI,gBAAgB,CAAC,CAAC;AACvD,WAAO;AAAA,MACH,UAAU,MAAM,YAAY;AAAA,MAC5B,YAAY,MAAM,YAAY;AAAA,IAClC;AAAA,EACJ;AACJ;;;AFlBA,oBAAuB;AAEvB,eAAsB,cAAc,IAAY,aAAuC;AACnF,QAAM,SAAS,IAAI,qBAAU;AAAA,IACzB,UAAU;AAAA,IACV,QAAQ;AAAA,EACZ,CAAC;AAED,MAAI;AACA,UAAM,UAAU,MAAM,OAAO,KAAK,IAAI,kBAAkB,yBAAQ,MAAM,kDAAkD,CAAC,CAAC;AAC1H,UAAM,aAAa,MAAM,QAAQ,kBAAkB,EAAE;AACrD,UAAM,iBAAiB,MAAM,OAAO,KAAK,IAAI;AAAA,MACzC,WAAW;AAAA,IACf,CAAC;AAED,UAAM,SAAS,MAAM,eAAe,aAAa;AAEjD,YAAQ,IAAI,MAAM;AAClB,WAAO,OAAO;AAAA,EAClB,SAAS,OAAO;AACZ,WAAO;AAAA,EACX;AACJ;AAEO,SAAS,UAAU,SAAiB,KAAsB;AAC7D,QAAM,UAAU,qBAAO,cAAc,SAAS,GAAG;AACjD,SAAO,QAAQ,YAAY,KAAK,QAAQ,IAAI;AAChD;","names":["import_ton_core"]}